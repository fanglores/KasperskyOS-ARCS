Performing C SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD failed with the following output:
Change Dir: /workspace/KOS_TCP-IP/build/CMakeFiles/CMakeTmp

Run Build Command(s):/usr/bin/make cmTC_a4131/fast && /usr/bin/make  -f CMakeFiles/cmTC_a4131.dir/build.make CMakeFiles/cmTC_a4131.dir/build
make[1]: Entering directory '/workspace/KOS_TCP-IP/build/CMakeFiles/CMakeTmp'
Building C object CMakeFiles/cmTC_a4131.dir/src.c.obj
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/arm-kos-gcc   -DCMAKE_HAVE_LIBC_PTHREAD   -o CMakeFiles/cmTC_a4131.dir/src.c.obj   -c /workspace/KOS_TCP-IP/build/CMakeFiles/CMakeTmp/src.c
Linking C executable cmTC_a4131
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/cmake -E cmake_link_script CMakeFiles/cmTC_a4131.dir/link.txt --verbose=1
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/arm-kos-gcc  -DCMAKE_HAVE_LIBC_PTHREAD   -static  CMakeFiles/cmTC_a4131.dir/src.c.obj  -o cmTC_a4131 
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/arm-kos-ld: CMakeFiles/cmTC_a4131.dir/src.c.obj: in function `main':
src.c:(.text+0x44): undefined reference to `pthread_create'
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/arm-kos-ld: src.c:(.text+0x5c): undefined reference to `pthread_cancel'
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/arm-kos-ld: src.c:(.text+0x74): undefined reference to `pthread_exit'
/opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/bin/arm-kos-ld: /opt/KasperskyOS-Community-Edition-1.0.1.4/toolchain/lib/gcc/arm-kos/9.2.1/libgcc.a(emutls.o): in function `__gthread_active_p':
emutls.c:(.text+0x20): undefined reference to `pthread_cancel'
collect2: error: ld returned 1 exit status
make[1]: *** [CMakeFiles/cmTC_a4131.dir/build.make:107: cmTC_a4131] Error 1
make[1]: Leaving directory '/workspace/KOS_TCP-IP/build/CMakeFiles/CMakeTmp'
make: *** [Makefile:141: cmTC_a4131/fast] Error 2


Source file was:
#include <pthread.h>

void* test_func(void* data)
{
  return data;
}

int main(void)
{
  pthread_t thread;
  pthread_create(&thread, NULL, test_func, NULL);
  pthread_detach(thread);
  pthread_cancel(thread);
  pthread_join(thread, NULL);
  // KOS: Does not support it.
  #if !defined(__KOS__)
  pthread_atfork(NULL, NULL, NULL);
  #endif
  pthread_exit(NULL);

  return 0;
}

